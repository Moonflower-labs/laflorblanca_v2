try{self["workbox:core:7.0.0"]&&_()}catch{}const te={"invalid-value":({paramName:s,validValueDescription:e,value:t})=>{if(!s||!e)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${s}' parameter was given a value with an unexpected value. ${e} Received a value of ${JSON.stringify(t)}.`},"not-an-array":({moduleName:s,className:e,funcName:t,paramName:r})=>{if(!s||!e||!t||!r)throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${r}' passed into '${s}.${e}.${t}()' must be an array.`},"incorrect-type":({expectedType:s,paramName:e,moduleName:t,className:r,funcName:a})=>{if(!s||!e||!t||!a)throw new Error("Unexpected input to 'incorrect-type' error.");const n=r?`${r}.`:"";return`The parameter '${e}' passed into '${t}.${n}${a}()' must be of type ${s}.`},"incorrect-class":({expectedClassName:s,paramName:e,moduleName:t,className:r,funcName:a,isReturnValueProblem:n})=>{if(!s||!t||!a)throw new Error("Unexpected input to 'incorrect-class' error.");const o=r?`${r}.`:"";return n?`The return value from '${t}.${o}${a}()' must be an instance of class ${s}.`:`The parameter '${e}' passed into '${t}.${o}${a}()' must be an instance of class ${s}.`},"missing-a-method":({expectedMethod:s,paramName:e,moduleName:t,className:r,funcName:a})=>{if(!s||!e||!t||!r||!a)throw new Error("Unexpected input to 'missing-a-method' error.");return`${t}.${r}.${a}() expected the '${e}' parameter to expose a '${s}' method.`},"add-to-cache-list-unexpected-type":({entry:s})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(s)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:s,secondEntry:e})=>{if(!s||!e)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${s} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:s})=>{if(!s)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${s}'.`},"invalid-cache-name":({cacheNameId:s,value:e})=>{if(!s)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${s}: '...'}). Received a value of '${JSON.stringify(e)}'`},"unregister-route-but-not-found-with-method":({method:s})=>{if(!s)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${s}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:s})=>`Replaying the background sync queue '${s}' failed.`,"duplicate-queue-name":({name:s})=>`The Queue name '${s}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:s,paramName:e})=>`The '${s}()' method can only be used when the '${e}' is used in the constructor.`,"unsupported-route-type":({moduleName:s,className:e,funcName:t,paramName:r})=>`The supplied '${r}' parameter was an unsupported type. Please check the docs for ${s}.${e}.${t} for valid input types.`,"not-array-of-class":({value:s,expectedClass:e,moduleName:t,className:r,funcName:a,paramName:n})=>`The supplied '${n}' parameter must be an array of '${e}' objects. Received '${JSON.stringify(s)},'. Please check the call to ${t}.${r}.${a}() to fix the issue.`,"max-entries-or-age-required":({moduleName:s,className:e,funcName:t})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${s}.${e}.${t}`,"statuses-or-headers-required":({moduleName:s,className:e,funcName:t})=>`You must define either config.statuses or config.headersin ${s}.${e}.${t}`,"invalid-string":({moduleName:s,funcName:e,paramName:t})=>{if(!t||!s||!e)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${t}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${s}.${e}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:s})=>{if(!s)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${s}"`},"single-range-only":({normalizedRangeHeader:s})=>{if(!s)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${s}"`},"invalid-range-values":({normalizedRangeHeader:s})=>{if(!s)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${s}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:s,start:e,end:t})=>`The start (${e}) and end (${t}) values in the Range are not satisfiable by the cached response, which is ${s} bytes.`,"attempt-to-cache-non-get-request":({url:s,method:e})=>`Unable to cache '${s}' because it is a '${e}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:s})=>`There was an attempt to cache '${s}' but the response was not defined.`,"no-response":({url:s,error:e})=>{let t=`The strategy could not generate a response for '${s}'.`;return e&&(t+=` The underlying error is ${e}.`),t},"bad-precaching-response":({url:s,status:e})=>`The precaching request for '${s}' failed`+(e?` with an HTTP status of ${e}.`:"."),"non-precached-url":({url:s})=>`createHandlerBoundToURL('${s}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:s})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${s} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:s,url:e})=>`Unable to find a precached response in ${s} for ${e}.`,"cross-origin-copy-response":({origin:s})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${s}.`,"opaque-streams-source":({type:s})=>{const e=`One of the workbox-streams sources resulted in an '${s}' response.`;return s==="opaqueredirect"?`${e} Please do not use a navigation request that results in a redirect as a source.`:`${e} Please ensure your sources are CORS-enabled.`}},se=(s,e={})=>{const t=te[s];if(!t)throw new Error(`Unable to find message for code '${s}'.`);return t(e)},re=se;class u extends Error{constructor(e,t){const r=re(e,t);super(r),this.name=e,this.details=t}}const ae=(s,e)=>{if(!Array.isArray(s))throw new u("not-an-array",e)},ne=(s,e,t)=>{if(typeof s[e]!=="function")throw t.expectedMethod=e,new u("missing-a-method",t)},oe=(s,e,t)=>{if(typeof s!==e)throw t.expectedType=e,new u("incorrect-type",t)},ie=(s,e,t)=>{if(!(s instanceof e))throw t.expectedClassName=e.name,new u("incorrect-class",t)},ce=(s,e,t)=>{if(!e.includes(s))throw t.validValueDescription=`Valid values are ${JSON.stringify(e)}.`,new u("invalid-value",t)},he=(s,e,t)=>{const r=new u("not-array-of-class",t);if(!Array.isArray(s))throw r;for(const a of s)if(!(a instanceof e))throw r},l={hasMethod:ne,isArray:ae,isInstance:ie,isOneOf:ce,isType:oe,isArrayOfClass:he},m={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},U=s=>[m.prefix,s,m.suffix].filter(e=>e&&e.length>0).join("-"),le=s=>{for(const e of Object.keys(m))s(e)},E={updateDetails:s=>{le(e=>{typeof s[e]=="string"&&(m[e]=s[e])})},getGoogleAnalyticsName:s=>s||U(m.googleAnalytics),getPrecacheName:s=>s||U(m.precache),getPrefix:()=>m.prefix,getRuntimeName:s=>s||U(m.runtime),getSuffix:()=>m.suffix},i=(()=>{"__WB_DISABLE_DEV_LOGS"in globalThis||(self.__WB_DISABLE_DEV_LOGS=!1);let s=!1;const e={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},t=function(n,o){if(self.__WB_DISABLE_DEV_LOGS)return;if(n==="groupCollapsed"&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent)){console[n](...o);return}const c=[`background: ${e[n]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"],h=s?[]:["%cworkbox",c.join(";")];console[n](...h,...o),n==="groupCollapsed"&&(s=!0),n==="groupEnd"&&(s=!1)},r={},a=Object.keys(e);for(const n of a){const o=n;r[o]=(...c)=>{t(o,c)}}return r})();function B(s,e){const t=e();return s.waitUntil(t),t}try{self["workbox:precaching:7.0.0"]&&_()}catch{}const ue="__WB_REVISION__";function de(s){if(!s)throw new u("add-to-cache-list-unexpected-type",{entry:s});if(typeof s=="string"){const n=new URL(s,location.href);return{cacheKey:n.href,url:n.href}}const{revision:e,url:t}=s;if(!t)throw new u("add-to-cache-list-unexpected-type",{entry:s});if(!e){const n=new URL(t,location.href);return{cacheKey:n.href,url:n.href}}const r=new URL(t,location.href),a=new URL(t,location.href);return r.searchParams.set(ue,e),{cacheKey:r.href,url:a.href}}class pe{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:r})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const a=t.originalRequest.url;r?this.notUpdatedURLs.push(a):this.updatedURLs.push(a)}return r}}}class fe{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:r})=>{const a=(r==null?void 0:r.cacheKey)||this._precacheController.getCacheKeyForURL(t.url);return a?new Request(a,{headers:t.headers}):t},this._precacheController=e}}const ge=(s,e)=>{i.groupCollapsed(s);for(const t of e)i.log(t);i.groupEnd()};function me(s){const e=s.length;e>0&&(i.groupCollapsed(`During precaching cleanup, ${e} cached request${e===1?" was":"s were"} deleted.`),ge("Deleted Cache Requests",s),i.groupEnd())}function F(s,e){if(e.length!==0){i.groupCollapsed(s);for(const t of e)i.log(t);i.groupEnd()}}function we(s,e){const t=s.length,r=e.length;if(t||r){let a=`Precaching ${t} file${t===1?"":"s"}.`;r>0&&(a+=` ${r} file${r===1?" is":"s are"} already cached.`),i.groupCollapsed(a),F("View newly precached URLs.",s),F("View previously precached URLs.",e),i.groupEnd()}}let x;function ye(){if(x===void 0){const s=new Response("");if("body"in s)try{new Response(s.body),x=!0}catch{x=!1}x=!1}return x}async function be(s,e){let t=null;if(s.url&&(t=new URL(s.url).origin),t!==self.location.origin)throw new u("cross-origin-copy-response",{origin:t});const r=s.clone(),n={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},o=ye()?r.body:await r.blob();return new Response(o,n)}const d=s=>new URL(String(s),location.href).href.replace(new RegExp(`^${location.origin}`),"");function j(s,e){const t=new URL(s);for(const r of e)t.searchParams.delete(r);return t.href}async function Re(s,e,t,r){const a=j(e.url,t);if(e.url===a)return s.match(e,r);const n=Object.assign(Object.assign({},r),{ignoreSearch:!0}),o=await s.keys(e,n);for(const c of o){const h=j(c.url,t);if(a===h)return s.match(c,r)}}class xe{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const A=new Set;async function _e(){i.log(`About to run ${A.size} callbacks to clean up caches.`);for(const s of A)await s(),i.log(s,"is complete.");i.log("Finished running callbacks.")}function Ce(s){return new Promise(e=>setTimeout(e,s))}try{self["workbox:strategies:7.0.0"]&&_()}catch{}function $(s){return typeof s=="string"?new Request(s):s}class Ne{constructor(e,t){this._cacheKeys={},l.isInstance(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new xe,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const r of this._plugins)this._pluginStateMap.set(r,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let r=$(e);if(r.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const o=await t.preloadResponse;if(o)return i.log(`Using a preloaded navigation response for '${d(r.url)}'`),o}const a=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const o of this.iterateCallbacks("requestWillFetch"))r=await o({request:r.clone(),event:t})}catch(o){if(o instanceof Error)throw new u("plugin-error-request-will-fetch",{thrownErrorMessage:o.message})}const n=r.clone();try{let o;o=await fetch(r,r.mode==="navigate"?void 0:this._strategy.fetchOptions),i.debug(`Network request for '${d(r.url)}' returned a response with status '${o.status}'.`);for(const c of this.iterateCallbacks("fetchDidSucceed"))o=await c({event:t,request:n,response:o});return o}catch(o){throw i.log(`Network request for '${d(r.url)}' threw an error.`,o),a&&await this.runCallbacks("fetchDidFail",{error:o,event:t,originalRequest:a.clone(),request:n.clone()}),o}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const t=$(e);let r;const{cacheName:a,matchOptions:n}=this._strategy,o=await this.getCacheKey(t,"read"),c=Object.assign(Object.assign({},n),{cacheName:a});r=await caches.match(o,c),r?i.debug(`Found a cached response in '${a}'.`):i.debug(`No cached response found in '${a}'.`);for(const h of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await h({cacheName:a,matchOptions:n,cachedResponse:r,request:o,event:this.event})||void 0;return r}async cachePut(e,t){const r=$(e);await Ce(0);const a=await this.getCacheKey(r,"write");{if(a.method&&a.method!=="GET")throw new u("attempt-to-cache-non-get-request",{url:d(a.url),method:a.method});const f=t.headers.get("Vary");f&&i.debug(`The response for ${d(a.url)} has a 'Vary: ${f}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!t)throw i.error(`Cannot cache non-existent response for '${d(a.url)}'.`),new u("cache-put-with-no-response",{url:d(a.url)});const n=await this._ensureResponseSafeToCache(t);if(!n)return i.debug(`Response '${d(a.url)}' will not be cached.`,n),!1;const{cacheName:o,matchOptions:c}=this._strategy,h=await self.caches.open(o),p=this.hasCallback("cacheDidUpdate"),y=p?await Re(h,a.clone(),["__WB_REVISION__"],c):null;i.debug(`Updating the '${o}' cache with a new Response for ${d(a.url)}.`);try{await h.put(a,p?n.clone():n)}catch(f){if(f instanceof Error)throw f.name==="QuotaExceededError"&&await _e(),f}for(const f of this.iterateCallbacks("cacheDidUpdate"))await f({cacheName:o,oldResponse:y,newResponse:n.clone(),request:a,event:this.event});return!0}async getCacheKey(e,t){const r=`${e.url} | ${t}`;if(!this._cacheKeys[r]){let a=e;for(const n of this.iterateCallbacks("cacheKeyWillBeUsed"))a=$(await n({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[r]=a}return this._cacheKeys[r]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const r=this._pluginStateMap.get(t);yield n=>{const o=Object.assign(Object.assign({},n),{state:r});return t[e](o)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const a of this.iterateCallbacks("cacheWillUpdate"))if(t=await a({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||(t&&t.status!==200&&(t=void 0),t&&t.status!==200&&(t.status===0?i.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):i.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class M{constructor(e={}){this.cacheName=E.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r=typeof e.request=="string"?new Request(e.request):e.request,a="params"in e?e.params:void 0,n=new Ne(this,{event:t,request:r,params:a}),o=this._getResponse(n,r,t),c=this._awaitComplete(o,n,r,t);return[o,c]}async _getResponse(e,t,r){await e.runCallbacks("handlerWillStart",{event:r,request:t});let a;try{if(a=await this._handle(t,e),!a||a.type==="error")throw new u("no-response",{url:t.url})}catch(n){if(n instanceof Error){for(const o of e.iterateCallbacks("handlerDidError"))if(a=await o({error:n,event:r,request:t}),a)break}if(a)i.log(`While responding to '${d(t.url)}', an ${n instanceof Error?n.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`);else throw n}for(const n of e.iterateCallbacks("handlerWillRespond"))a=await n({event:r,request:t,response:a});return a}async _awaitComplete(e,t,r,a){let n,o;try{n=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:n}),await t.doneWaiting()}catch(c){c instanceof Error&&(o=c)}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:n,error:o}),t.destroy(),o)throw o}}class b extends M{constructor(e={}){e.cacheName=E.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(b.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const r=await t.cacheMatch(e);return r||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let r;const a=t.params||{};if(this._fallbackToNetwork){i.warn(`The precached response for ${d(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const n=a.integrity,o=e.integrity,c=!o||o===n;r=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?o||n:void 0})),n&&c&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,r.clone())&&i.log(`A response for ${d(e.url)} was used to "repair" the precache.`))}else throw new u("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{const n=a.cacheKey||await t.getCacheKey(e,"read");i.groupCollapsed("Precaching is responding to: "+d(e.url)),i.log(`Serving the precached url: ${d(n instanceof Request?n.url:n)}`),i.groupCollapsed("View request details here."),i.log(e),i.groupEnd(),i.groupCollapsed("View response details here."),i.log(r),i.groupEnd(),i.groupEnd()}return r}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const r=await t.fetch(e);if(!await t.cachePut(e,r.clone()))throw new u("bad-precaching-response",{url:e.url,status:r.status});return r}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[r,a]of this.plugins.entries())a!==b.copyRedirectedCacheableResponsesPlugin&&(a===b.defaultPrecacheCacheabilityPlugin&&(e=r),a.cacheWillUpdate&&t++);t===0?this.plugins.push(b.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}b.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:s}){return!s||s.status>=400?null:s}};b.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:s}){return s.redirected?await be(s):s}};class Ee{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:r=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new b({cacheName:E.getPrecacheName(e),plugins:[...t,new fe({precacheController:this})],fallbackToNetwork:r}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){l.isArray(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const r of e){typeof r=="string"?t.push(r):r&&r.revision===void 0&&t.push(r.url);const{cacheKey:a,url:n}=de(r),o=typeof r!="string"&&r.revision?"reload":"default";if(this._urlsToCacheKeys.has(n)&&this._urlsToCacheKeys.get(n)!==a)throw new u("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(n),secondEntry:a});if(typeof r!="string"&&r.integrity){if(this._cacheKeysToIntegrities.has(a)&&this._cacheKeysToIntegrities.get(a)!==r.integrity)throw new u("add-to-cache-list-conflicting-integrities",{url:n});this._cacheKeysToIntegrities.set(a,r.integrity)}if(this._urlsToCacheKeys.set(n,a),this._urlsToCacheModes.set(n,o),t.length>0){const c=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;i.warn(c)}}}install(e){return B(e,async()=>{const t=new pe;this.strategy.plugins.push(t);for(const[n,o]of this._urlsToCacheKeys){const c=this._cacheKeysToIntegrities.get(o),h=this._urlsToCacheModes.get(n),p=new Request(n,{integrity:c,cache:h,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:o},request:p,event:e}))}const{updatedURLs:r,notUpdatedURLs:a}=t;return we(r,a),{updatedURLs:r,notUpdatedURLs:a}})}activate(e){return B(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),r=await t.keys(),a=new Set(this._urlsToCacheKeys.values()),n=[];for(const o of r)a.has(o.url)||(await t.delete(o),n.push(o.url));return me(n),{deletedURLs:n}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r)return(await self.caches.open(this.strategy.cacheName)).match(r)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new u("non-precached-url",{url:e});return r=>(r.request=new Request(e),r.params=Object.assign({cacheKey:t},r.params),this.strategy.handle(r))}}let L;const q=()=>(L||(L=new Ee),L);try{self["workbox:routing:7.0.0"]&&_()}catch{}const Q="GET",Te=["DELETE","GET","HEAD","PATCH","POST","PUT"],k=s=>s&&typeof s=="object"?(l.hasMethod(s,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),s):(l.isType(s,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:s});class R{constructor(e,t,r=Q){l.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&l.isOneOf(r,Te,{paramName:"method"}),this.handler=k(t),this.match=e,this.method=r}setCatchHandler(e){this.catchHandler=k(e)}}class $e extends R{constructor(e,t,r){l.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});const a=({url:n})=>{const o=e.exec(n.href);if(o){if(n.origin!==location.origin&&o.index!==0){i.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${n.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);return}return o.slice(1)}};super(a,t,r)}}class ke{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data;i.debug("Caching URLs from the window",t.urlsToCache);const r=Promise.all(t.urlsToCache.map(a=>{typeof a=="string"&&(a=[a]);const n=new Request(...a);return this.handleRequest({request:n,event:e})}));e.waitUntil(r),e.ports&&e.ports[0]&&r.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){l.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http")){i.debug("Workbox Router only supports URLs that start with 'http'.");return}const a=r.origin===location.origin,{params:n,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let c=o&&o.handler;const h=[];c&&(h.push(["Found a route to handle this request:",o]),n&&h.push(["Passing the following params to the route's handler:",n]));const p=e.method;if(!c&&this._defaultHandlerMap.has(p)&&(h.push(`Failed to find a matching route. Falling back to the default handler for ${p}.`),c=this._defaultHandlerMap.get(p)),!c){i.debug(`No route found for: ${d(r)}`);return}i.groupCollapsed(`Router is responding to: ${d(r)}`),h.forEach(g=>{Array.isArray(g)?i.log(...g):i.log(g)}),i.groupEnd();let y;try{y=c.handle({url:r,request:e,event:t,params:n})}catch(g){y=Promise.reject(g)}const f=o&&o.catchHandler;return y instanceof Promise&&(this._catchHandler||f)&&(y=y.catch(async g=>{if(f){i.groupCollapsed(`Error thrown when responding to:  ${d(r)}. Falling back to route's Catch Handler.`),i.error("Error thrown by:",o),i.error(g),i.groupEnd();try{return await f.handle({url:r,request:e,event:t,params:n})}catch(W){W instanceof Error&&(g=W)}}if(this._catchHandler)return i.groupCollapsed(`Error thrown when responding to:  ${d(r)}. Falling back to global Catch Handler.`),i.error("Error thrown by:",o),i.error(g),i.groupEnd(),this._catchHandler.handle({url:r,request:e,event:t});throw g})),y}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const n=this._routes.get(r.method)||[];for(const o of n){let c;const h=o.match({url:e,sameOrigin:t,request:r,event:a});if(h)return h instanceof Promise&&i.warn(`While routing ${d(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,o),c=h,(Array.isArray(c)&&c.length===0||h.constructor===Object&&Object.keys(h).length===0||typeof h=="boolean")&&(c=void 0),{route:o,params:c}}return{}}setDefaultHandler(e,t=Q){this._defaultHandlerMap.set(t,k(e))}setCatchHandler(e){this._catchHandler=k(e)}registerRoute(e){l.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),l.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),l.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),l.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),l.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new u("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new u("unregister-route-route-not-registered")}}let C;const ve=()=>(C||(C=new ke,C.addFetchListener(),C.addCacheListener()),C);function T(s,e,t){let r;if(typeof s=="string"){const n=new URL(s,location.href);{if(!(s.startsWith("/")||s.startsWith("http")))throw new u("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const c=s.startsWith("http")?n.pathname:s,h="[*:?+]";new RegExp(`${h}`).exec(c)&&i.debug(`The '$capture' parameter contains an Express-style wildcard character (${h}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}const o=({url:c})=>(c.pathname===n.pathname&&c.origin!==n.origin&&i.debug(`${s} only partially matches the cross-origin URL ${c.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),c.href===n.href);r=new R(o,e,t)}else if(s instanceof RegExp)r=new $e(s,e,t);else if(typeof s=="function")r=new R(s,e,t);else if(s instanceof R)r=s;else throw new u("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return ve().registerRoute(r),r}function Ue(s,e=[]){for(const t of[...s.searchParams.keys()])e.some(r=>r.test(t))&&s.searchParams.delete(t);return s}function*Le(s,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:r=!0,urlManipulation:a}={}){const n=new URL(s,location.href);n.hash="",yield n.href;const o=Ue(n,e);if(yield o.href,t&&o.pathname.endsWith("/")){const c=new URL(o.href);c.pathname+=t,yield c.href}if(r){const c=new URL(o.href);c.pathname+=".html",yield c.href}if(a){const c=a({url:n});for(const h of c)yield h.href}}class Pe extends R{constructor(e,t){const r=({request:a})=>{const n=e.getURLsToCacheKeys();for(const o of Le(a.url,t)){const c=n.get(o);if(c){const h=e.getIntegrityForCacheKey(c);return{cacheKey:c,integrity:h}}}i.debug("Precaching did not find a match for "+d(a.url))};super(r,e.strategy)}}function De(s){const e=q(),t=new Pe(e,s);T(t)}const Se="-precache-",Ae=async(s,e=Se)=>{const r=(await self.caches.keys()).filter(a=>a.includes(e)&&a.includes(self.registration.scope)&&a!==s);return await Promise.all(r.map(a=>self.caches.delete(a))),r};function Ie(){self.addEventListener("activate",s=>{const e=E.getPrecacheName();s.waitUntil(Ae(e).then(t=>{t.length>0&&i.log("The following out-of-date precaches were cleaned up automatically:",t)}))})}function Oe(s){return q().createHandlerBoundToURL(s)}function Me(s){q().precache(s)}function qe(s,e){Me(s),De(e)}class Ke extends R{constructor(e,{allowlist:t=[/./],denylist:r=[]}={}){l.isArrayOfClass(t,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.allowlist"}),l.isArrayOfClass(r,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.denylist"}),super(a=>this._match(a),e),this._allowlist=t,this._denylist=r}_match({url:e,request:t}){if(t&&t.mode!=="navigate")return!1;const r=e.pathname+e.search;for(const a of this._denylist)if(a.test(r))return i.log(`The navigation route ${r} is not being used, since the URL matches this denylist pattern: ${a.toString()}`),!1;return this._allowlist.some(a=>a.test(r))?(i.debug(`The navigation route ${r} is being used.`),!0):(i.log(`The navigation route ${r} is not being used, since the URL being navigated to doesn't match the allowlist.`),!1)}}const v={strategyStart:(s,e)=>`Using ${s} to respond to '${d(e.url)}'`,printFinalResponse:s=>{s&&(i.groupCollapsed("View the final response here."),i.log(s||"[No response returned]"),i.groupEnd())}};class We extends M{async _handle(e,t){const r=[];l.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let a=await t.cacheMatch(e),n;if(a)r.push(`Found a cached response in the '${this.cacheName}' cache.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{a=await t.fetchAndCachePut(e)}catch(o){o instanceof Error&&(n=o)}a?r.push("Got response from network."):r.push("Unable to get a response from the network.")}{i.groupCollapsed(v.strategyStart(this.constructor.name,e));for(const o of r)i.log(o);v.printFinalResponse(a),i.groupEnd()}if(!a)throw new u("no-response",{url:e.url,error:n});return a}}const Be={cacheWillUpdate:async({response:s})=>s.status===200||s.status===0?s:null};class Y extends M{constructor(e={}){super(e),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(Be)}async _handle(e,t){const r=[];l.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"request"});const a=t.fetchAndCachePut(e).catch(()=>{});t.waitUntil(a);let n=await t.cacheMatch(e),o;if(n)r.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);try{n=await a}catch(c){c instanceof Error&&(o=c)}}{i.groupCollapsed(v.strategyStart(this.constructor.name,e));for(const c of r)i.log(c);v.printFinalResponse(n),i.groupEnd()}if(!n)throw new u("no-response",{url:e.url,error:o});return n}}function z(s){s.then(()=>{})}const Fe=(s,e)=>e.some(t=>s instanceof t);let H,V;function je(){return H||(H=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function He(){return V||(V=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const X=new WeakMap,I=new WeakMap,Z=new WeakMap,P=new WeakMap,K=new WeakMap;function Ve(s){const e=new Promise((t,r)=>{const a=()=>{s.removeEventListener("success",n),s.removeEventListener("error",o)},n=()=>{t(w(s.result)),a()},o=()=>{r(s.error),a()};s.addEventListener("success",n),s.addEventListener("error",o)});return e.then(t=>{t instanceof IDBCursor&&X.set(t,s)}).catch(()=>{}),K.set(e,s),e}function Ge(s){if(I.has(s))return;const e=new Promise((t,r)=>{const a=()=>{s.removeEventListener("complete",n),s.removeEventListener("error",o),s.removeEventListener("abort",o)},n=()=>{t(),a()},o=()=>{r(s.error||new DOMException("AbortError","AbortError")),a()};s.addEventListener("complete",n),s.addEventListener("error",o),s.addEventListener("abort",o)});I.set(s,e)}let O={get(s,e,t){if(s instanceof IDBTransaction){if(e==="done")return I.get(s);if(e==="objectStoreNames")return s.objectStoreNames||Z.get(s);if(e==="store")return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return w(s[e])},set(s,e,t){return s[e]=t,!0},has(s,e){return s instanceof IDBTransaction&&(e==="done"||e==="store")?!0:e in s}};function Je(s){O=s(O)}function Qe(s){return s===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(e,...t){const r=s.call(D(this),e,...t);return Z.set(r,e.sort?e.sort():[e]),w(r)}:He().includes(s)?function(...e){return s.apply(D(this),e),w(X.get(this))}:function(...e){return w(s.apply(D(this),e))}}function Ye(s){return typeof s=="function"?Qe(s):(s instanceof IDBTransaction&&Ge(s),Fe(s,je())?new Proxy(s,O):s)}function w(s){if(s instanceof IDBRequest)return Ve(s);if(P.has(s))return P.get(s);const e=Ye(s);return e!==s&&(P.set(s,e),K.set(e,s)),e}const D=s=>K.get(s);function ze(s,e,{blocked:t,upgrade:r,blocking:a,terminated:n}={}){const o=indexedDB.open(s,e),c=w(o);return r&&o.addEventListener("upgradeneeded",h=>{r(w(o.result),h.oldVersion,h.newVersion,w(o.transaction),h)}),t&&o.addEventListener("blocked",h=>t(h.oldVersion,h.newVersion,h)),c.then(h=>{n&&h.addEventListener("close",()=>n()),a&&h.addEventListener("versionchange",p=>a(p.oldVersion,p.newVersion,p))}).catch(()=>{}),c}function Xe(s,{blocked:e}={}){const t=indexedDB.deleteDatabase(s);return e&&t.addEventListener("blocked",r=>e(r.oldVersion,r)),w(t).then(()=>{})}const Ze=["get","getKey","getAll","getAllKeys","count"],et=["put","add","delete","clear"],S=new Map;function G(s,e){if(!(s instanceof IDBDatabase&&!(e in s)&&typeof e=="string"))return;if(S.get(e))return S.get(e);const t=e.replace(/FromIndex$/,""),r=e!==t,a=et.includes(t);if(!(t in(r?IDBIndex:IDBObjectStore).prototype)||!(a||Ze.includes(t)))return;const n=async function(o,...c){const h=this.transaction(o,a?"readwrite":"readonly");let p=h.store;return r&&(p=p.index(c.shift())),(await Promise.all([p[t](...c),a&&h.done]))[0]};return S.set(e,n),n}Je(s=>({...s,get:(e,t,r)=>G(e,t)||s.get(e,t,r),has:(e,t)=>!!G(e,t)||s.has(e,t)}));try{self["workbox:expiration:7.0.0"]&&_()}catch{}const tt="workbox-expiration",N="cache-entries",J=s=>{const e=new URL(s,location.href);return e.hash="",e.href};class st{constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore(N,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&Xe(this._cacheName)}async setTimestamp(e,t){e=J(e);const r={url:e,timestamp:t,cacheName:this._cacheName,id:this._getId(e)},n=(await this.getDb()).transaction(N,"readwrite",{durability:"relaxed"});await n.store.put(r),await n.done}async getTimestamp(e){const r=await(await this.getDb()).get(N,this._getId(e));return r==null?void 0:r.timestamp}async expireEntries(e,t){const r=await this.getDb();let a=await r.transaction(N).store.index("timestamp").openCursor(null,"prev");const n=[];let o=0;for(;a;){const h=a.value;h.cacheName===this._cacheName&&(e&&h.timestamp<e||t&&o>=t?n.push(a.value):o++),a=await a.continue()}const c=[];for(const h of n)await r.delete(N,h.id),c.push(h.url);return c}_getId(e){return this._cacheName+"|"+J(e)}async getDb(){return this._db||(this._db=await ze(tt,1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class rt{constructor(e,t={}){this._isRunning=!1,this._rerunRequested=!1;{if(l.isType(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!(t.maxEntries||t.maxAgeSeconds))throw new u("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&l.isType(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&l.isType(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"})}this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new st(e)}async expireEntries(){if(this._isRunning){this._rerunRequested=!0;return}this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-this._maxAgeSeconds*1e3:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),r=await self.caches.open(this._cacheName);for(const a of t)await r.delete(a,this._matchOptions);t.length>0?(i.groupCollapsed(`Expired ${t.length} ${t.length===1?"entry":"entries"} and removed ${t.length===1?"it":"them"} from the '${this._cacheName}' cache.`),i.log(`Expired the following ${t.length===1?"URL":"URLs"}:`),t.forEach(a=>i.log(`    ${a}`)),i.groupEnd()):i.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,z(this.expireEntries()))}async updateTimestamp(e){l.isType(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),r=Date.now()-this._maxAgeSeconds*1e3;return t!==void 0?t<r:!0}else throw new u("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}function at(s){l.isType(s,"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),A.add(s),i.log("Registered a callback to respond to quota errors.",s)}class ee{constructor(e={}){this.cachedResponseWillBeUsed=async({event:t,request:r,cacheName:a,cachedResponse:n})=>{if(!n)return null;const o=this._isResponseDateFresh(n),c=this._getCacheExpiration(a);z(c.expireEntries());const h=c.updateTimestamp(r.url);if(t)try{t.waitUntil(h)}catch{"request"in t&&i.warn(`Unable to ensure service worker stays alive when updating cache entry for '${d(t.request.url)}'.`)}return o?n:null},this.cacheDidUpdate=async({cacheName:t,request:r})=>{l.isType(t,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),l.isInstance(r,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(t);await a.updateTimestamp(r.url),await a.expireEntries()};{if(!(e.maxEntries||e.maxAgeSeconds))throw new u("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});e.maxEntries&&l.isType(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&l.isType(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"})}this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&at(()=>this.deleteCacheAndMetadata())}_getCacheExpiration(e){if(e===E.getRuntimeName())throw new u("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new rt(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(t===null)return!0;const r=Date.now();return t>=r-this._maxAgeSeconds*1e3}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}try{self["workbox:cacheable-response:7.0.0"]&&_()}catch{}class nt{constructor(e={}){{if(!(e.statuses||e.headers))throw new u("statuses-or-headers-required",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor"});e.statuses&&l.isArray(e.statuses,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.statuses"}),e.headers&&l.isType(e.headers,"object",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.headers"})}this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){l.isInstance(e,Response,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"isResponseCacheable",paramName:"response"});let t=!0;if(this._statuses&&(t=this._statuses.includes(e.status)),this._headers&&t&&(t=Object.keys(this._headers).some(r=>e.headers.get(r)===this._headers[r])),!t){i.groupCollapsed(`The request for '${d(e.url)}' returned a response that does not meet the criteria for being cached.`),i.groupCollapsed("View cacheability criteria here."),i.log("Cacheable statuses: "+JSON.stringify(this._statuses)),i.log("Cacheable headers: "+JSON.stringify(this._headers,null,2)),i.groupEnd();const r={};e.headers.forEach((a,n)=>{r[n]=a}),i.groupCollapsed("View response status and headers here."),i.log(`Response status: ${e.status}`),i.log("Response headers: "+JSON.stringify(r,null,2)),i.groupEnd(),i.groupCollapsed("View full response details here."),i.log(e.headers),i.log(e),i.groupEnd(),i.groupEnd()}return t}}class ot{constructor(e){this.cacheWillUpdate=async({response:t})=>this._cacheableResponse.isResponseCacheable(t)?t:null,this._cacheableResponse=new nt(e)}}self.addEventListener("message",s=>{s.data&&s.data.type==="SKIP_WAITING"&&self.skipWaiting()});qe([{"revision":"77001aebd19dbdcc7c68b79d2645781d","url":"apple-splash-landscape-2048x1536.png"},{"revision":"34c0c3b7a6dd7b98b2ebe2827e15fc97","url":"apple-splash-landscape-dark-2048x1536.png"},{"revision":"d847c15b7235a64ed800095109f65848","url":"apple-splash-landscape-dark-2778x1284.png"},{"revision":"77001aebd19dbdcc7c68b79d2645781d","url":"apple-splash-landscape-light-2048x1536.png"},{"revision":"208c332c9fa51ec25bc90c5f86e279c1","url":"apple-splash-landscape-light-2778x1284.png"},{"revision":"db47fac3841c39cbe60cea10cff3ac49","url":"apple-splash-portrait-1536x2048.png"},{"revision":"0690b17e21ece4ceaa81b93f2f96291e","url":"apple-splash-portrait-dark-1284x2778.png"},{"revision":"92a9191d321748a060c2a26d18785e75","url":"apple-splash-portrait-light-1284x2778.png"},{"revision":"955f33c854b159a5a74c3ad26ad3b3f2","url":"apple-touch-icon-180x180.png"},{"revision":null,"url":"assets/AuthLayout-Bc9Fs5y1.js"},{"revision":null,"url":"assets/basic-CC9qsRcd.js"},{"revision":null,"url":"assets/favorites-B1yM5tKO.js"},{"revision":null,"url":"assets/help-DG-Y7apR.js"},{"revision":null,"url":"assets/index-AknObfPh.js"},{"revision":null,"url":"assets/index-BiDhnFj6.css"},{"revision":null,"url":"assets/live-xE0fl7MR.js"},{"revision":null,"url":"assets/login-DRO3FvsT.js"},{"revision":null,"url":"assets/MembersLayout-CR3Ka6PI.js"},{"revision":null,"url":"assets/profile-E7em87fd.js"},{"revision":null,"url":"assets/QuestionLayout-DG_-IWdA.js"},{"revision":null,"url":"assets/register-CivaDb7n.js"},{"revision":null,"url":"assets/reset-confirmation-BTVA_1eW.js"},{"revision":null,"url":"assets/reset-password-CI_0jrDo.js"},{"revision":null,"url":"assets/store-CpRjX1XZ.js"},{"revision":null,"url":"assets/subscription-DY6vOGgL.js"},{"revision":null,"url":"assets/tarot-JAYhzjQt.js"},{"revision":null,"url":"assets/UserProfileLayout-ClqNhg17.js"},{"revision":null,"url":"assets/workbox-window.prod.es5-D5gOYdM7.js"},{"revision":"d976278abb56ea8a0fdeeaeb881c4d0b","url":"favicon.ico"},{"revision":"3c1bdb5c39eb06dce2418e2113904bf3","url":"flower.png"},{"revision":"d7978eda1e6794b4d64aeb851c6a6ea5","url":"index.html"},{"revision":"aaf391027ceaa970f1ccc588ae77a047","url":"logo.jpeg"},{"revision":"1a52f7510f5eca233ce6cc8a13117dfa","url":"maskable-icon-512x512.png"},{"revision":"ca723c24109ba12edee4940766870820","url":"plan-personality.jpeg"},{"revision":"07e6979629774429f0cbb04ed315d0b4","url":"plan-soul.jpeg"},{"revision":"ad1287aa31ced886647374f60be59eb9","url":"plan-spirit.jpeg"},{"revision":"b43b410cc5a0fc2116e5f73e3e7101de","url":"pwa-192x192.png"},{"revision":"23da8a484aa0872ea6e9f1ed8bb74326","url":"pwa-512x512.png"},{"revision":"e2949066bb4c74f2edb6691c1c3c0032","url":"pwa-64x64.png"},{"revision":"d976278abb56ea8a0fdeeaeb881c4d0b","url":"favicon.ico"},{"revision":"e2949066bb4c74f2edb6691c1c3c0032","url":"pwa-64x64.png"},{"revision":"b43b410cc5a0fc2116e5f73e3e7101de","url":"pwa-192x192.png"},{"revision":"23da8a484aa0872ea6e9f1ed8bb74326","url":"pwa-512x512.png"},{"revision":"1a52f7510f5eca233ce6cc8a13117dfa","url":"maskable-icon-512x512.png"},{"revision":"f9665ce9e7e4e4c67fb1965d3a16d229","url":"manifest.webmanifest"}]);Ie();let it;const ct=[/^\/backoffice/];T(new Ke(Oe("index.html"),{allowlist:it,denylist:ct}));T(new RegExp("^https://i.ytimg.com/.*"),new Y({cacheName:"yt-images",plugins:[new ee({maxEntries:50,maxAgeSeconds:30*24*60*60})]}));T(({url:s})=>s.pathname.startsWith("/static/"),new We({cacheName:"assets-cache",plugins:[new ot({statuses:[0,200]}),new ee({maxEntries:60,maxAgeSeconds:24*60*60})]}));T(new RegExp("/src/.*"),new Y({cacheName:"internal-resources"}));const ht={error:"This is a fallback response because the network is currently unavailable."};self.addEventListener("fetch",s=>{s.request.url.startsWith("http://localhost:8000/api/")&&s.respondWith(fetch(s.request).catch(()=>new Response(JSON.stringify(ht),{headers:{"Content-Type":"application/json"}})))});
